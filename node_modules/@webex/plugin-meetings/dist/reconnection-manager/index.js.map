{"version":3,"sources":["index.js"],"names":["NeedsRetryError","Error","ReconnectionManager","meeting","iceState","disconnected","resolve","timer","undefined","timeoutDuration","config","reconnection","iceReconnectionTimeout","status","RECONNECTION","STATE","DEFAULT_STATUS","tryCount","DEFAULT_TRY_COUNT","webex","maxRejoinAttempts","rejoinAttempts","reset","LoggerProxy","logger","log","clearTimeout","reject","setTimeout","enabled","COMPLETE","info","ReconnectInProgress","ReconnectionError","networkDisconnect","validate","Metrics","postEvent","event","eventType","MEDIA_RECONNECTING","executeReconnection","then","MEDIA_RECOVERED","data","recoveredBy","RECOVERED_BY_NEW","catch","reconnectError","reconnect","error","CALL_ABORTED","errors","category","errorObjects","media","errorCode","fatal","name","mediaEngine","shownToUser","IN_PROGRESS","reconnectMercuryWebSocket","FAILURE","rejoinMeeting","wasSharing","isSharing","meetings","syncMeetings","state","_LEFT_","join","reconnectMedia","Media","stopTracks","mediaProperties","shareTrack","mediaDirection","sendShare","Trigger","trigger","file","function","EVENT_TRIGGERS","MEETING_STOPPED_SHARING_LOCAL","reason","SHARE_STOPPED_REASON","MEETING_REJOIN","setupPeerConnection","attachMedia","meetingId","id","remoteQualityLevel","enableRtx","peerConnection","setRemoteStream","roap","sendRoapMediaRequest","sdp","roapSeq","internal","mercury","connected","disconnect","connect","PeerConnectionManager","close","unsetPeerConnection","reInitiatePeerconnection","setPeerConnectionEvents","statsAnalyzer","updatePeerconnection"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\n/* eslint-disable no-warning-comments */\n\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport Trigger from '../common/events/trigger-proxy';\nimport {\n  EVENT_TRIGGERS, RECONNECTION, SHARE_STOPPED_REASON, _LEFT_\n} from '../constants';\nimport ReconnectionError from '../common/errors/reconnection';\nimport ReconnectInProgress from '../common/errors/reconnection-in-progress';\nimport PeerConnectionManager from '../peer-connection-manager';\nimport {eventType, reconnection, errorObjects} from '../metrics/config';\nimport Media from '../media';\nimport Metrics from '../metrics';\n\n/**\n * Used to indicate that the reconnect logic needs to be retried.\n *\n * @class NeedsRetryError\n * @extends {Error}\n */\nclass NeedsRetryError extends Error {}\n\n/**\n * @export\n * @class ReconnectionManager\n*/\nexport default class ReconnectionManager {\n  /**\n   * @param {Meeting} meeting\n   */\n  constructor(meeting) {\n    /**\n     * Stores ICE reconnection state data.\n     *\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof ReconnectionManager\n     */\n    this.iceState = {\n      disconnected: false,\n      resolve: () => {},\n      timer: undefined,\n      timeoutDuration: meeting.config.reconnection.iceReconnectionTimeout\n    };\n\n    /**\n     * @instance\n     * @type {String}\n     * @private\n     * @memberof ReconnectionManager\n    */\n    this.status = RECONNECTION.STATE.DEFAULT_STATUS;\n    /**\n     * @instance\n     * @type {Number}\n     * @private\n     * @memberof ReconnectionManager\n    */\n    this.tryCount = RECONNECTION.STATE.DEFAULT_TRY_COUNT;\n    /**\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof ReconnectionManager\n    */\n    this.webex = meeting.webex;\n    /**\n     * @instance\n     * @type {Meeting}\n     * @private\n     * @memberof ReconnectionManager\n     */\n    this.meeting = meeting;\n\n    this.maxRejoinAttempts = meeting.config.reconnection.maxRejoinAttempts;\n    this.rejoinAttempts = RECONNECTION.STATE.DEFAULT_TRY_COUNT;\n\n\n    // Make sure reconnection state is in default\n    this.reset();\n  }\n\n  /**\n   * Sets the iceState to connected and clears any disconnect timeouts and\n   * related timeout data within the iceState.\n   *\n   * @returns {undefined}\n   * @public\n   * @memberof ReconnectionManager\n   */\n  iceReconnected() {\n    if (this.iceState.disconnected) {\n      LoggerProxy.logger.log('ReconnectionManager:index#iceReconnected --> ice has reconnected');\n\n      this.iceState.resolve();\n      this.iceState.resolve = () => {};\n\n      if (this.iceState.timer) {\n        clearTimeout(this.iceState.timer);\n        delete this.iceState.timer;\n      }\n\n      this.iceState.disconnected = false;\n    }\n  }\n\n  /**\n   * Set the iceState to disconnected and generates a timeout that waits for the\n   * iceState to reconnect and then resolves. If the ice state is already\n   * processing a reconnect, it immediately resolves. Rejects if the timeout\n   * duration is reached.\n   *\n   * @returns {Promise<undefined>}\n   * @public\n   * @memberof ReconnectionManager\n   */\n  waitForIceReconnect() {\n    if (!this.iceState.disconnected) {\n      LoggerProxy.logger.log('ReconnectionManager:index#waitForIceReconnect --> waiting for ice reconnect');\n\n      this.iceState.disconnected = true;\n\n      return new Promise((resolve, reject) => {\n        this.iceState.timer = setTimeout(() => {\n          if (this.iceState.disconnected === false) {\n            resolve();\n          }\n          else {\n            this.iceState.disconnected = false;\n            reject(new Error(`ice reconnection did not occur in ${this.iceState.timeoutDuration}ms`));\n          }\n        }, this.iceState.timeoutDuration);\n\n        this.iceState.resolve = resolve;\n      });\n    }\n\n    // return a resolved promise to prevent multiple catch executions of reconnect\n    return Promise.resolve();\n  }\n\n  /**\n   * @returns {undefined}\n   * @public\n   * @memberof ReconnectionManager\n   */\n  reset() {\n    this.status = RECONNECTION.STATE.DEFAULT_STATUS;\n    this.tryCount = RECONNECTION.STATE.DEFAULT_TRY_COUNT;\n    this.rejoinAttempts = RECONNECTION.STATE.DEFAULT_TRY_COUNT;\n  }\n\n  /**\n   * @returns {Boolean}\n   * @throws {ReconnectionError}\n   * @private\n   * @memberof ReconnectionManager\n   */\n  validate() {\n    if (this.meeting.config.reconnection.enabled) {\n      if (\n        this.status === RECONNECTION.STATE.DEFAULT_STATUS ||\n        this.status === RECONNECTION.STATE.COMPLETE\n      ) {\n        return true;\n      }\n\n      LoggerProxy.logger.info('ReconnectionManager:index#validate --> Reconnection already in progress.');\n\n      throw new ReconnectInProgress('Reconnection already in progress.');\n    }\n\n    LoggerProxy.logger.info('ReconnectionManager:index#validate --> Reconnection is not enabled.');\n\n    throw new ReconnectionError('Reconnection is not enabled.');\n  }\n\n  /**\n   * Initiates a media reconnect for the active meeting\n   * @param {Object} reconnectOptions\n   * @param {boolean} [reconnectOptions.networkDisconnect=false] indicates if a network disconnect event happened\n   * @returns {Promise}\n   * @public\n   * @memberof ReconnectionManager\n   */\n  async reconnect({networkDisconnect = false} = {}) {\n    LoggerProxy.logger.info('ReconnectionManager:index#reconnect --> Reconnection start.');\n    // First, validate that we can reconnect, if not, it will throw an error\n    try {\n      this.validate();\n    }\n    catch (error) {\n      LoggerProxy.logger.info('ReconnectionManager:index#reconnect --> Reconnection unable to begin.', error);\n      throw error;\n    }\n\n    Metrics.postEvent({\n      event: eventType.MEDIA_RECONNECTING,\n      meeting: this.meeting\n    });\n\n    return this.executeReconnection({networkDisconnect})\n      .then(() => {\n        LoggerProxy.logger.info('ReconnectionManager:index#reconnect --> Reconnection successful.');\n        Metrics.postEvent({\n          event: eventType.MEDIA_RECOVERED,\n          meeting: this.meeting,\n          data: {recoveredBy: reconnection.RECOVERED_BY_NEW}\n        });\n      })\n      .catch((reconnectError) => {\n        if (reconnectError instanceof NeedsRetryError) {\n          LoggerProxy.logger.info('ReconnectionManager:index#reconnect --> Reconnection not successful, retrying.');\n          // Reset our reconnect status since we are looping back to the beginning\n          this.status = RECONNECTION.STATE.DEFAULT_STATUS;\n\n          return this.reconnect({networkDisconnect: true});\n        }\n\n        LoggerProxy.logger.error('ReconnectionManager:index#reconnect --> Reconnection failed.', reconnectError);\n        Metrics.postEvent({\n          event: eventType.CALL_ABORTED,\n          meeting: this.meeting,\n          // TODO: need to move this to error handler module, create a new one\n          data: {\n            errors: [\n              {\n                category: errorObjects.category.media,\n                errorCode: 2008,\n                fatal: true,\n                name: errorObjects.name.mediaEngine,\n                shownToUser: false\n              }\n            ]\n          }\n        });\n\n        throw reconnectError;\n      });\n  }\n\n  /**\n   * @param {Object} reconnectOptions\n   * @param {boolean} [reconnectOptions.networkDisconnect=false] indicates if a network disconnect event happened\n   * @returns {Promise}\n   * @throws {NeedsRetryError}\n   * @private\n   * @memberof ReconnectionManager\n   */\n  async executeReconnection({networkDisconnect = false}) {\n    this.status = RECONNECTION.STATE.IN_PROGRESS;\n\n    LoggerProxy.logger.info('ReconnectionManager:index#executeReconnection --> Attempting to reconnect to meeting.');\n\n    if (networkDisconnect) {\n      try {\n        await this.reconnectMercuryWebSocket();\n      }\n      catch (error) {\n        // TODO: Add Metrics for Reconnect Failed\n        LoggerProxy.logger.error('ReconnectionManager:index#executeReconnection --> Unable to reconnect to websocket, giving up.');\n        this.status = RECONNECTION.STATE.FAILURE;\n        throw (error);\n      }\n    }\n\n    let rejoinMeeting = false;\n    const wasSharing = this.meeting.isSharing;\n\n    try {\n      LoggerProxy.logger.info('ReconnectionManager:index#executeReconnection --> Updating meeting data from server.');\n      await this.webex.meetings.syncMeetings();\n    }\n    catch (syncError) {\n      LoggerProxy.logger.info('ReconnectionManager:index#executeReconnection --> Unable to sync meetings, reconnecting.', syncError);\n      throw (new NeedsRetryError(syncError));\n    }\n\n    if (this.meeting.state === _LEFT_) {\n      try {\n        rejoinMeeting = true;\n\n        await this.meeting.join();\n      }\n      catch (joinError) {\n        this.rejoinAttempts += 1;\n        if (this.rejoinAttempts <= this.maxRejoinAttempts) {\n          LoggerProxy.logger.info('ReconnectionManager:index#executeReconnection --> Unable to rejoin meeting, reconnecting.', joinError);\n          throw (new NeedsRetryError(joinError));\n        }\n        else {\n          LoggerProxy.logger.error('ReconnectionManager:index#executeReconnection --> Unable to rejoin meeting after max attempts.', joinError);\n          this.status = RECONNECTION.STATE.FAILURE;\n          throw joinError;\n        }\n      }\n    }\n\n    try {\n      const media = await this.reconnectMedia();\n\n      LoggerProxy.logger.log('ReconnectionManager:index#executeReconnection --> Media reestablished');\n      this.status = RECONNECTION.STATE.COMPLETE;\n      if (rejoinMeeting && wasSharing) {\n        // Stop the share streams if user tried to rejoin\n        Media.stopTracks(this.meeting.mediaProperties.shareTrack);\n        this.meeting.isSharing = false;\n        this.meeting.mediaProperties.mediaDirection.sendShare = false;\n        Trigger.trigger(\n          this.meeting,\n          {\n            file: 'reconnection-manager/index',\n            function: 'executeReconnection'\n          },\n          EVENT_TRIGGERS.MEETING_STOPPED_SHARING_LOCAL,\n          {\n            reason: SHARE_STOPPED_REASON.MEETING_REJOIN\n          }\n        );\n      }\n\n      return media;\n    }\n    catch (error) {\n      // TODO: Add Metrics for Reconnect Failed\n      LoggerProxy.logger.error('ReconnectionManager:index#executeReconnection --> Media reestablishment failed');\n      this.status = RECONNECTION.STATE.FAILURE;\n\n      throw (error);\n    }\n  }\n\n  /**\n   * @param {Meeting} meeting\n   * @returns {Promise}\n   * @private\n   * @memberof ReconnectionManager\n   */\n  reconnectMedia() {\n    LoggerProxy.logger.log('ReconnectionManager:index#reconnectMedia --> Begin reestablishment of media');\n\n    ReconnectionManager.setupPeerConnection(this.meeting);\n\n    return Media.attachMedia(this.meeting.mediaProperties, {\n      meetingId: this.meeting.id,\n      remoteQualityLevel: this.meeting.mediaProperties.remoteQualityLevel,\n      enableRtx: this.meeting.config.enableRtx\n    })\n      .then((peerConnection) => this.meeting.setRemoteStream(peerConnection))\n      .then(() => this.meeting.roap\n        .sendRoapMediaRequest({\n          sdp: this.meeting.mediaProperties.peerConnection.sdp,\n          roapSeq: this.meeting.roapSeq,\n          meeting: this.meeting,\n          reconnect: true // Need to check if its a reconnect after rejoin or media inactivity\n        }));\n  }\n\n  /**\n   * Attempt to Reconnect Mercury Websocket\n   * @returns {Promise}\n   * @private\n   * @memberof ReconnectionManager\n   */\n  async reconnectMercuryWebSocket() {\n    LoggerProxy.logger.info('ReconnectionManager:index#reconnectMercuryWebSocket --> Reconnecting websocket.');\n    // First, attempt to disconnect if we think we are already connected.\n    if (this.webex.internal.mercury.connected) {\n      LoggerProxy.logger.info('ReconnectionManager:index#reconnectMercuryWebSocket --> Disconnecting existing websocket.');\n      try {\n        await this.webex.internal.mercury.disconnect();\n        LoggerProxy.logger.info('ReconnectionManager:index#reconnectMercuryWebSocket --> Websocket disconnected successfully.');\n      }\n      catch (disconnectError) {\n        // If we can't disconnect, the sdk is in such a bad state that reconnecting is not going to happen.\n        LoggerProxy.logger.error('ReconnectionManager:index#reconnectMercuryWebSocket --> Unable to disconnect to websocket, giving up.', disconnectError);\n        throw disconnectError;\n      }\n    }\n\n    try {\n      LoggerProxy.logger.info('ReconnectionManager:index#reconnectMercuryWebSocket --> Connecting websocket.');\n      await this.webex.internal.mercury.connect();\n      LoggerProxy.logger.info('ReconnectionManager:index#reconnectMercuryWebSocket --> Websocket connected successfully.');\n    }\n    catch (connectError) {\n      LoggerProxy.logger.error('ReconnectionManager:index#reconnectMercuryWebSocket --> Unable to connect to websocket, giving up.', connectError);\n\n      throw (connectError);\n    }\n  }\n\n  /**\n   * @param {Meeting} meeting\n   * @returns {undefined}\n   * @private\n   * @memberof ReconnectionManager\n   */\n  static setupPeerConnection(meeting) {\n    // close pcs, unset to null and create a new one with out closing any streams\n    PeerConnectionManager.close(meeting.mediaProperties.peerConnection);\n    meeting.mediaProperties.unsetPeerConnection();\n    meeting.mediaProperties.reInitiatePeerconnection();\n    PeerConnectionManager.setPeerConnectionEvents(meeting);\n    // update the peerconnection in the stats manager when ever we reconnect\n    meeting.statsAnalyzer.updatePeerconnection(meeting.mediaProperties.peerConnection);\n  }\n}\n"]}