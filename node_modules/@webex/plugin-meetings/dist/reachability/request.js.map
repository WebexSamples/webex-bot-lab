{"version":3,"sources":["request.js"],"names":["RechabilityRequest","request","method","HTTP_VERBS","GET","shouldRefreshAccessToken","api","API","CALLIOPEDISCOVERY","resource","RESOURCE","CLUSTERS","then","res","clusters","body","LoggerProxy","logger","info","localSDPList","POST","REACHABILITY","offers","StatelessWebexPlugin"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;;;;;AAMA;;;IAGMA,kB;;;;;;;;;;;;;;;8FAKQ;AAAA,aAAM,MAAKC,OAAL,CAAa;AAC/BC,QAAAA,MAAM,EAAEC,sBAAWC,GADY;AAE/BC,QAAAA,wBAAwB,EAAE,KAFK;AAG/BC,QAAAA,GAAG,EAAEC,eAAIC,iBAHsB;AAI/BC,QAAAA,QAAQ,EAAEC,oBAASC;AAJY,OAAb,EAMjBC,IANiB,CAMZ,UAACC,GAAD,EAAS;AAAA,YACNC,QADM,GACMD,GAAG,CAACE,IADV,CACND,QADM;;AAGbE,6BAAYC,MAAZ,CAAmBC,IAAnB,wEAAwF,wBAAeJ,QAAf,CAAxF;;AAEA,eAAO,mBAAYA,QAAZ,CAAP;AACD,OAZiB,CAAN;AAAA,K;uGAmBS,UAACK,YAAD;AAAA,aAAkB,MAAKlB,OAAL,CAAa;AACpDC,QAAAA,MAAM,EAAEC,sBAAWiB,IADiC;AAEpDf,QAAAA,wBAAwB,EAAE,KAF0B;AAGpDC,QAAAA,GAAG,EAAEC,eAAIC,iBAH2C;AAIpDC,QAAAA,QAAQ,EAAEC,oBAASW,YAJiC;AAKpDN,QAAAA,IAAI,EAAE;AAACO,UAAAA,MAAM,EAAEH;AAAT;AAL8C,OAAb,EAOtCP,IAPsC,CAOjC,UAACC,GAAD,EAAS;AACbG,6BAAYC,MAAZ,CAAmBC,IAAnB,CAAwB,6EAAxB;;AAEA,eAAOL,GAAG,CAACE,IAAX;AACD,OAXsC,CAAlB;AAAA,K;;;;;EAxBUQ,+B;;eAsClBvB,kB","sourcesContent":["import {StatelessWebexPlugin} from '@webex/webex-core';\n\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport {\n  HTTP_VERBS,\n  RESOURCE,\n  API\n} from '../constants';\n\n/**\n * @class RechabilityRequest\n */\nclass RechabilityRequest extends StatelessWebexPlugin {\n  /**\n   * gets the cluster information\n   * @returns {Promise}\n   */\ngetClusters = () => this.request({\n  method: HTTP_VERBS.GET,\n  shouldRefreshAccessToken: false,\n  api: API.CALLIOPEDISCOVERY,\n  resource: RESOURCE.CLUSTERS\n})\n  .then((res) => {\n    const {clusters} = res.body;\n\n    LoggerProxy.logger.info(`Reachability:request#getClusters --> get clusters successful:${JSON.stringify(clusters)}`);\n\n    return Object.keys(clusters);\n  });\n\n/**\n   * gets remote SDP For Clusters\n   * @param {Object} localSDPList localSDPs for the cluster\n   * @returns {Object}\n   */\nremoteSDPForClusters = (localSDPList) => this.request({\n  method: HTTP_VERBS.POST,\n  shouldRefreshAccessToken: false,\n  api: API.CALLIOPEDISCOVERY,\n  resource: RESOURCE.REACHABILITY,\n  body: {offers: localSDPList}\n})\n  .then((res) => {\n    LoggerProxy.logger.info('Reachability:request#remoteSDPForClusters --> Remote SDPs got succcessfully');\n\n    return res.body;\n  });\n}\n\nexport default RechabilityRequest;\n"]}