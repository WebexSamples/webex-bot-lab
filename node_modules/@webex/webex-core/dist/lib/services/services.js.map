{"version":3,"sources":["services.js"],"names":["trailingSlashes","Services","WebexPlugin","extend","namespace","registries","states","props","validateDomains","_catalogs","getRegistry","get","webex","getState","_getCatalog","name","priorityHost","serviceGroup","catalog","hasService","serviceName","hasAllowedDomains","getAllowedDomains","length","list","markFailedUrl","url","noPriorityHosts","updateServices","from","query","token","formattedQuery","status","collecting","waitForCatalog","queryKey","includes","reject","Error","emailhash","email","toLowerCase","toString","_fetchNewServiceHostmap","then","serviceHostMap","updateServiceUrls","updateCredentialsConfig","catch","error","validateUser","reqId","logger","info","canAuthorize","credentials","getUserToken","sendUserActivation","userObj","activated","exists","details","user","config","client_id","client_secret","collectPreauthCatalog","idbrokerService","getClientToken","uri","scope","tokenObj","collectSigninCatalog","rto","all","response","statusCode","responseText","body","message","request","service","resource","method","headers","accept","authorization","undefined","shouldRefreshAccessToken","mode","idbroker","identity","authorizationString","authorizeUrl","replace","setConfig","timeout","supertoken","access_token","postauth","ready","preauth","initServiceCatalogs","waitForService","priorityUrl","priorityUrlObj","getServiceFromUrl","resolve","isReady","groupsToCheck","checkCatalog","catalogGroup","scopedPriorityUrl","scopedPrioriryUrlObj","map","group","_formatReceivedHostmap","serviceHostmap","formattedHostmap","hostCatalog","reduce","accumulator","key","id","split","defaultUrl","serviceLinks","serviceItem","find","item","defaultHost","Url","parse","hostname","hosts","push","host","ttl","priority","homeCluster","forEach","getClusterId","findClusterId","getServiceFromClusterId","params","findServiceFromClusterId","findServiceUrlFromUrl","isServiceUrl","isAllowedDomainUrl","findAllowedDomain","convertUrlToPriorityHostUrl","data","qs","format","requestObject","initConfig","services","discovery","formattedDiscoveryServices","allowedDomains","setAllowedDomains","getOrgId","orgId","warn","initialize","ServiceCatalog","registry","ServiceRegistry","state","ServiceState","set","listenToOnce"],"mappings":"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","sourcesContent":["import Url from 'url';\n\nimport sha256 from 'crypto-js/sha256';\n\nimport WebexPlugin from '../webex-plugin';\n\nimport ServiceCatalog from './service-catalog';\nimport ServiceRegistry from './service-registry';\nimport ServiceState from './service-state';\n\nconst trailingSlashes = /(?:^\\/)|(?:\\/$)/;\n\n/* eslint-disable no-underscore-dangle */\n/**\n * @class\n */\nconst Services = WebexPlugin.extend({\n  namespace: 'Services',\n\n  /**\n   * The {@link WeakMap} of {@link ServiceRegistry} class instances that are\n   * keyed with WebexCore instances.\n   *\n   * @instance\n   * @type {WeakMap<WebexCore, ServiceRegistry>}\n   * @private\n   * @memberof Services\n   */\n  registries: new WeakMap(),\n\n  /**\n   * The {@link WeakMap} of {@link ServiceState} class instances that are\n   * keyed with WebexCore instances.\n   *\n   * @instance\n   * @type {WeakMap<WebexCore, ServiceState>}\n   * @private\n   * @memberof Services\n   */\n  states: new WeakMap(),\n\n  props: {\n    validateDomains: ['boolean', false, true]\n  },\n\n  _catalogs: new WeakMap(),\n\n  /**\n   * Get the registry associated with this webex instance.\n   *\n   * @private\n   * @memberof Services\n   * @returns {ServiceRegistry} - The associated {@link ServiceRegistry}.\n   */\n  getRegistry() {\n    return this.registries.get(this.webex);\n  },\n\n  /**\n   * Get the state associated with this webex instance.\n   *\n   * @private\n   * @memberof Services\n   * @returns {ServiceState} - The associated {@link ServiceState}.\n   */\n  getState() {\n    return this.states.get(this.webex);\n  },\n\n  /**\n   * @private\n   * Get the current catalog based on the assocaited\n   * webex instance.\n   * @returns {ServiceCatalog}\n   */\n  _getCatalog() {\n    return this._catalogs.get(this.webex);\n  },\n\n  /**\n   * Get a service url from the current services list by name\n   * from the associated instance catalog.\n   * @param {string} name\n   * @param {boolean} [priorityHost]\n   * @param {string} [serviceGroup]\n   * @returns {string|undefined}\n   */\n  get(name, priorityHost, serviceGroup) {\n    const catalog = this._getCatalog();\n\n    return catalog.get(name, priorityHost, serviceGroup);\n  },\n\n  /**\n   * Determine if the catalog contains a specific service\n   *\n   * @param {string} serviceName - The service name to validate.\n   * @returns {boolean} - True if the service exists.\n   */\n  hasService(serviceName) {\n    return !!(this.get(serviceName));\n  },\n\n  /**\n   * Determine if a whilelist exists in the service catalog.\n   *\n   * @returns {boolean} - True if a allowed domains list exists.\n   */\n  hasAllowedDomains() {\n    const catalog = this._getCatalog();\n\n    return (catalog.getAllowedDomains().length > 0);\n  },\n\n  /**\n   * Generate a service catalog as an object from\n   * the associated instance catalog.\n   * @param {boolean} [priorityHost] - use highest priority host if set to `true`\n   * @param {string} [serviceGroup]\n   * @returns {Record<string, string>}\n   */\n  list(priorityHost, serviceGroup) {\n    const catalog = this._getCatalog();\n\n    return catalog.list(priorityHost, serviceGroup);\n  },\n\n  /**\n   * Mark a priority host service url as failed.\n   * This will mark the host associated with the\n   * `ServiceUrl` to be removed from the its\n   * respective host array, and then return the next\n   * viable host from the `ServiceUrls` host array,\n   * or the `ServiceUrls` default url if no other priority\n   * hosts are available, or if `noPriorityHosts` is set to\n   * `true`.\n   * @param {string} url\n   * @param {boolean} noPriorityHosts\n   * @returns {string}\n   */\n  markFailedUrl(url, noPriorityHosts) {\n    const catalog = this._getCatalog();\n\n    return catalog.markFailedUrl(url, noPriorityHosts);\n  },\n\n  /**\n   * Update a list of `serviceUrls` to the most current\n   * catalog via the defined `discoveryUrl` then returns the current\n   * list of services.\n   * @param {object} [param]\n   * @param {string} [param.from] - This accepts `limited` or `signin`\n   * @param {object} [param.query] - This accepts `email`, `orgId` or `userId` key values\n   * @param {string} [param.query.email] - must be a standard-format email\n   * @param {string} [param.query.orgId] - must be an organization id\n   * @param {string} [param.query.userId] - must be a user id\n   * @param {string} [param.token] - used for signin catalog\n   * @returns {Promise<object>}\n   */\n  updateServices({from, query, token} = {}) {\n    const catalog = this._getCatalog();\n    let formattedQuery, serviceGroup;\n\n    // map catalog name to service group name.\n    switch (from) {\n      case 'limited': serviceGroup = 'preauth'; break;\n      case 'signin': serviceGroup = 'signin'; break;\n      default: serviceGroup = 'postauth'; break;\n    }\n\n    // confirm catalog update for group is not in progress.\n    if (catalog.status[serviceGroup].collecting) {\n      return this.waitForCatalog(serviceGroup);\n    }\n\n    catalog.status[serviceGroup].collecting = true;\n\n    if (serviceGroup === 'preauth') {\n      const queryKey = query && Object.keys(query)[0];\n\n      if (!['email', 'emailhash', 'userId', 'orgId', 'mode'].includes(queryKey)) {\n        return Promise.reject(new Error('a query param of email, emailhash, userId, orgId, or mode is required'));\n      }\n    }\n    // encode email when query key is email\n    if (serviceGroup === 'preauth' || serviceGroup === 'signin') {\n      const queryKey = Object.keys(query)[0];\n\n      formattedQuery = {};\n\n      if (queryKey === 'email') {\n        formattedQuery.emailhash = sha256(query.email.toLowerCase()).toString();\n      }\n      else {\n        formattedQuery[queryKey] = query[queryKey];\n      }\n    }\n\n    return this._fetchNewServiceHostmap({\n      from,\n      token,\n      query: formattedQuery\n    })\n      .then((serviceHostMap) => {\n        catalog.updateServiceUrls(serviceGroup, serviceHostMap);\n        this.updateCredentialsConfig();\n        catalog.status[serviceGroup].collecting = false;\n      })\n      .catch((error) => {\n        catalog.status[serviceGroup].collecting = false;\n\n        return Promise.reject(error);\n      });\n  },\n\n  /**\n   * User validation parameter transfer object for {@link validateUser}.\n   * @param {object} ValidateUserPTO\n   * @property {string} ValidateUserPTO.email - The email of the user.\n   * @property {string} [ValidateUserPTO.reqId] - The activation requester.\n   */\n\n  /**\n   * User validation return transfer object for {@link validateUser}.\n   * @param {object} ValidateUserRTO\n   * @property {boolean} ValidateUserRTO.activated - If the user is activated.\n   * @property {boolean} ValidateUserRTO.exists - If the user exists.\n   * @property {string} ValidateUserRTO.details - A descriptive status message.\n   * @property {object} ValidateUserRTO.user - **Atlas** service user object.\n   */\n\n  /**\n   * Validate if a user is activated and update the service catalogs as needed\n   * based on the user's activation status.\n   *\n   * @param {ValidateUserPTO} - The parameter transfer object.\n   * @returns {ValidateUserRTO} - The return transfer object.\n   */\n  validateUser({email, reqId = 'WEBCLIENT'}) {\n    this.logger.info('services: validating a user');\n\n    // Validate that an email parameter key was provided.\n    if (!email) {\n      return Promise.reject(new Error('`email` is required'));\n    }\n\n    // Destructure the credentials object.\n    const {canAuthorize} = this.webex.credentials;\n\n    // Validate that the user is already authorized.\n    if (canAuthorize) {\n      return this.updateServices()\n        .then(() => this.webex.credentials.getUserToken())\n        .then((token) => this.sendUserActivation({\n          email,\n          reqId,\n          token: token.toString()\n        }))\n        .then((userObj) => ({\n          activated: true,\n          exists: true,\n          details: 'user is authorized via a user token',\n          user: userObj\n        }));\n    }\n\n    // Destructure the client authorization details.\n    /* eslint-disable camelcase */\n    const {client_id, client_secret} = this.webex.credentials.config;\n\n    // Validate that client authentication details exist.\n    if (!client_id || !client_secret) {\n      return Promise.reject(new Error(\n        'client authentication details are not available'\n      ));\n    }\n    /* eslint-enable camelcase */\n\n    // Declare a class-memeber-scoped token for usage within the promise chain.\n    let token;\n\n    // Begin client authentication user validation.\n    return this.collectPreauthCatalog({email})\n      .then(() => {\n        // Retrieve the service url from the updated catalog. This is required\n        // since `WebexCore` is usually not fully initialized at the time this\n        // request completes.\n        const idbrokerService = this.get('idbroker', true);\n\n        // Collect the client auth token.\n        return this.webex.credentials.getClientToken({\n          uri: `${idbrokerService}idb/oauth2/v1/access_token`,\n          scope: 'webexsquare:admin webexsquare:get_conversation Identity:SCIM'\n        });\n      })\n      .then((tokenObj) => {\n        // Generate the token string.\n        token = tokenObj.toString();\n\n        // Collect the signin catalog using the client auth information.\n        return this.collectSigninCatalog({email, token});\n      })\n      // Validate if collecting the signin catalog failed and populate the RTO\n      // with the appropriate content.\n      .catch((error) => ({\n        exists: (error.name !== 'NotFound'),\n        activated: false,\n        details: (error.name !== 'NotFound') ?\n          'user exists but is not activated' :\n          'user does not exist and is not activated'\n      }))\n      // Validate if the previous promise resolved with an RTO and populate the\n      // new RTO accordingly.\n      .then((rto) => Promise.all([\n        rto || {\n          activated: true,\n          exists: true,\n          details: 'user exists and is activated'\n        },\n        this.sendUserActivation({email, reqId, token})\n      ]))\n      .then(([rto, user]) => ({...rto, user}))\n      .catch((error) => {\n        const response = {\n          statusCode: error.statusCode,\n          responseText: error.body && error.body.message,\n          body: error.body\n        };\n\n        return Promise.reject(response);\n      });\n  },\n\n  /**\n   * User activation parameter transfer object for {@link sendUserActivation}.\n   * @typedef {object} SendUserActivationPTO\n   * @property {string} SendUserActivationPTO.email - The email of the user.\n   * @property {string} SendUserActivationPTO.reqId - The activation requester.\n   * @property {string} SendUserActivationPTO.token - The client auth token.\n   */\n\n  /**\n   * Send a request to activate a user using a client token.\n   *\n   * @param {SendUserActivationPTO} - The Parameter transfer object.\n   * @returns {AtlasDTO} - The DTO returned from the **Atlas** service.\n   */\n  sendUserActivation({email, reqId, token}) {\n    this.logger.info('services: sending user activation request');\n\n    // Send the user activation request to the **Atlas** service.\n    return this.request({\n      service: 'atlas',\n      resource: 'users/activations',\n      method: 'POST',\n      headers: {\n        accept: 'application/json',\n        authorization: token,\n        'x-prelogin-userid': undefined\n      },\n      body: {email, reqId},\n      shouldRefreshAccessToken: false\n    })\n      // On success, return the **Atlas** user object.\n      .then(({body}) => body)\n      // On failure, reject with error from **Atlas**.\n      .catch((error) => Promise.reject(error));\n  },\n\n  /**\n   * simplified method to update the preauth catalog via email\n   *\n   * @param {object} query\n   * @param {string} query.email - A standard format email.\n   * @param {string} query.orgId - The user's OrgId.\n   * @returns {Promise<void>}\n   */\n  collectPreauthCatalog(query) {\n    if (!query) {\n      return this.updateServices({from: 'limited', query: {mode: 'DEFAULT_BY_PROXIMITY'}});\n    }\n\n    return this.updateServices({from: 'limited', query});\n  },\n\n  /**\n   * simplified method to update the signin catalog via email and token\n   * @param {object} param\n   * @param {string} param.email - must be a standard-format email\n   * @param {string} param.token - must be a client token\n   * @returns {Promise<void>}\n   */\n  collectSigninCatalog({email, token} = {}) {\n    if (!email) {\n      return Promise.reject(new Error('`email` is required'));\n    }\n    if (!token) {\n      return Promise.reject(new Error('`token` is required'));\n    }\n\n    return this.updateServices({from: 'signin', query: {email}, token});\n  },\n\n  /**\n   * Updates credentials config to utilize u2c catalog\n   * urls.\n   * @returns {void}\n   */\n  updateCredentialsConfig() {\n    const {idbroker, identity} = this.list(true);\n\n    if (idbroker && identity) {\n      const {authorizationString, authorizeUrl} = this.webex.config.credentials;\n\n      // This must be set outside of the setConfig method used to assign the\n      // idbroker and identity url values.\n      this.webex.config.credentials.authorizeUrl = authorizationString ?\n        authorizeUrl :\n        `${idbroker.replace(trailingSlashes, '')}/idb/oauth2/v1/authorize`;\n\n\n      this.webex.setConfig({\n        credentials: {\n          idbroker: {\n            url: idbroker.replace(trailingSlashes, '') // remove trailing slash\n          },\n          identity: {\n            url: identity.replace(trailingSlashes, '') // remove trailing slash\n          }\n        }\n      });\n    }\n  },\n\n  /**\n   * Wait until the service catalog is available,\n   * or reject afte ra timeout of 60 seconds.\n   * @param {string} serviceGroup\n   * @param {number} [timeout] - in seconds\n   * @returns {Promise<void>}\n   */\n  waitForCatalog(serviceGroup, timeout) {\n    const catalog = this._getCatalog();\n    const {supertoken} = this.webex.credentials;\n\n    if (\n      serviceGroup === 'postauth' &&\n      supertoken &&\n      supertoken.access_token &&\n      !catalog.status.postauth.collecting &&\n      !catalog.status.postauth.ready\n    ) {\n      if (!catalog.status.preauth.ready) {\n        return this.initServiceCatalogs();\n      }\n\n      return this.updateServices();\n    }\n\n    return catalog.waitForCatalog(serviceGroup, timeout);\n  },\n\n  /**\n   * Service waiting parameter transfer object for {@link waitForService}.\n   *\n   * @typedef {object} WaitForServicePTO\n   * @property {string} [WaitForServicePTO.name] - The service name.\n   * @property {string} [WaitForServicePTO.url] - The service url.\n   * @property {string} [WaitForServicePTO.timeout] - wait duration in seconds.\n   */\n\n  /**\n   * Wait until the service has been ammended to any service catalog. This\n   * method prioritizes the service name over the service url when searching.\n   *\n   * @param {WaitForServicePTO} - The parameter transfer object.\n   * @returns {Promise<string>} - Resolves to the priority host of a service.\n   */\n  waitForService({name, timeout = 5, url}) {\n    const priorityUrl = this.get(name, true);\n    const priorityUrlObj = this.getServiceFromUrl(url);\n\n    if (priorityUrl || priorityUrlObj) {\n      return Promise.resolve(priorityUrl || priorityUrlObj.priorityUrl);\n    }\n\n    // Save memory by grabbing the catalog after there isn't a priortyURL\n    const catalog = this._getCatalog();\n\n    if (catalog.isReady) {\n      return url ?\n        Promise.resolve(url) :\n        Promise.reject(new Error(\n          `services: service '${name}' was not found in any of the catalogs`\n        ));\n    }\n\n    return new Promise((resolve, reject) => {\n      const groupsToCheck = ['limited', 'signin', 'postauth'];\n      const checkCatalog = (catalogGroup) =>\n        catalog.waitForCatalog(catalogGroup, timeout)\n          .then(() => {\n            const scopedPriorityUrl = this.get(name, true);\n            const scopedPrioriryUrlObj = this.getServiceFromUrl(url);\n\n            if (scopedPriorityUrl || scopedPrioriryUrlObj) {\n              resolve(scopedPriorityUrl || scopedPrioriryUrlObj.priorityUrl);\n            }\n          })\n          .catch(() => undefined);\n\n      Promise.all(groupsToCheck.map((group) => checkCatalog(group)))\n        .then(() => {\n          reject(new Error(\n            `services: service '${name}' was not found after waiting`\n          ));\n        });\n    });\n  },\n\n  /**\n   * @private\n   * Organize a received hostmap from a service\n   * catalog endpoint.\n   * @param {object} serviceHostmap\n   * @returns {object}\n   */\n  _formatReceivedHostmap(serviceHostmap) {\n    // map the host catalog items to a formatted hostmap\n    const formattedHostmap = Object.keys(serviceHostmap.hostCatalog).reduce(\n      (accumulator, key) => {\n        if (serviceHostmap.hostCatalog[key].length === 0) {\n          return accumulator;\n        }\n\n        const serviceName = serviceHostmap.hostCatalog[key][0].id.split(':')[3];\n        const defaultUrl = serviceHostmap.serviceLinks[serviceName];\n\n        let serviceItem = accumulator.find(\n          (item) => item.name === serviceName\n        );\n\n        if (!serviceItem) {\n          serviceItem = {\n            name: serviceName,\n            defaultUrl,\n            defaultHost: Url.parse(defaultUrl).hostname,\n            hosts: []\n          };\n\n          accumulator.push(serviceItem);\n        }\n\n        serviceItem.hosts.push(\n          // map the default key as a low priority default for cluster matching\n          {\n            host: key,\n            ttl: -1,\n            priority: 10,\n            id: serviceHostmap.hostCatalog[key][0].id,\n            homeCluster: serviceItem.defaultHost === key\n          },\n          // map the rest of the hosts in their proper locations\n          ...serviceHostmap.hostCatalog[key].map(\n            (host) => ({\n              ...host,\n              homeCluster: serviceItem.defaultHost === key\n            })\n          )\n        );\n\n        return accumulator;\n      }, []\n    );\n\n    // append service links that do not exist in the host catalog\n    Object.keys(serviceHostmap.serviceLinks).forEach((key) => {\n      const service = formattedHostmap.find((item) => item.name === key);\n\n      if (!service) {\n        formattedHostmap.push({\n          name: key,\n          defaultUrl: serviceHostmap.serviceLinks[key],\n          defaultHost: Url.parse(serviceHostmap.serviceLinks[key]).hostname,\n          hosts: []\n        });\n      }\n    });\n\n    return formattedHostmap;\n  },\n\n  /**\n   * Get the clusterId associated with a URL string.\n   * @param {string} url\n   * @returns {string} - Cluster ID of url provided\n   */\n  getClusterId(url) {\n    const catalog = this._getCatalog();\n\n    return catalog.findClusterId(url);\n  },\n\n  /**\n   * Get a service value from a provided clusterId. This method will\n   * return an object containing both the name and url of a found service.\n   * @param {object} params\n   * @param {string} params.clusterId - clusterId of found service\n   * @param {boolean} [params.priorityHost] - returns priority host url if true\n   * @param {string} [params.serviceGroup] - specify service group\n   * @returns {object} service\n   * @returns {string} service.name\n   * @returns {string} service.url\n   */\n  getServiceFromClusterId(params) {\n    const catalog = this._getCatalog();\n\n    return catalog.findServiceFromClusterId(params);\n  },\n\n  /**\n   * Get a service object from a service url if the service url exists in the\n   * catalog.\n   *\n   * @param {string} url - The url to be validated.\n   * @returns {object} - Service object.\n   * @returns {object.name} - The name of the service found.\n   * @returns {object.priorityUrl} - The priority url of the found service.\n   * @returns {object.defaultUrl} - The default url of the found service.\n   */\n  getServiceFromUrl(url = '') {\n    const service = this._getCatalog().findServiceUrlFromUrl(url);\n\n    if (!service) {\n      return undefined;\n    }\n\n    return {\n      name: service.name,\n      priorityUrl: service.get(true),\n      defaultUrl: service.get()\n    };\n  },\n\n  /**\n   * Verify that a provided url exists in the service\n   * catalog.\n   * @param {string} url\n   * @returns {boolean} - true if exists, false otherwise\n   */\n  isServiceUrl(url) {\n    const catalog = this._getCatalog();\n\n    return !!(catalog.findServiceUrlFromUrl(url));\n  },\n\n  /**\n   * Determine if a provided url is in the catalog's allowed domains.\n   *\n   * @param {string} url - The url to match allowed domains against.\n   * @returns {boolean} - True if the url provided is allowed.\n   */\n  isAllowedDomainUrl(url) {\n    const catalog = this._getCatalog();\n\n    return !!(catalog.findAllowedDomain(url));\n  },\n\n  /**\n   * Converts the host portion of the url from default host\n   * to a priority host\n   *\n   * @param {string} url a service url that contains a default host\n   * @returns {string} a service url that contains the top priority host.\n   * @throws if url isn't a service url\n   */\n  convertUrlToPriorityHostUrl(url = '') {\n    const data = this.getServiceFromUrl(url);\n\n    if (!data) {\n      throw Error(`No service associated with url: [${url}]`);\n    }\n\n    return url.replace(data.defaultUrl, data.priorityUrl);\n  },\n\n  /**\n   * @private\n   * Simplified method wrapper for sending a request to get\n   * an updated service hostmap.\n   * @param {object} [param]\n   * @param {string} [param.from] - This accepts `limited` or `signin`\n   * @param {object} [param.query] - This accepts `email`, `orgId` or `userId` key values\n   * @param {string} [param.query.email] - must be a standard-format email\n   * @param {string} [param.query.orgId] - must be an organization id\n   * @param {string} [param.query.userId] - must be a user id\n   * @param {string} [param.token] - used for signin catalog\n   * @returns {Promise<object>}\n   */\n  _fetchNewServiceHostmap({from, query, token} = {}) {\n    const service = 'u2c';\n    const resource = from ? `/${from}/catalog` : '/catalog';\n    const qs = {...query, format: 'hostmap'};\n\n    const requestObject = {\n      method: 'GET', service, resource, qs\n    };\n\n    if (token) {\n      requestObject.headers = {authorization: token};\n    }\n\n    return this.request(requestObject)\n      .then(({body}) => this._formatReceivedHostmap(body));\n  },\n\n  /**\n   * Initialize the discovery services and the whitelisted services.\n   *\n   * @returns {void}\n   */\n  initConfig() {\n    // Get the catalog and destructure the services config.\n    const catalog = this._getCatalog();\n    const {services} = this.webex.config;\n\n    // Validate that the services configuration exists.\n    if (services) {\n      // Check for discovery services.\n      if (services.discovery) {\n        // Format the discovery configuration into an injectable array.\n        const formattedDiscoveryServices = Object.keys(services.discovery)\n          .map((key) => ({\n            name: key,\n            defaultUrl: services.discovery[key]\n          }));\n\n        // Inject formatted services into services catalog.\n        catalog.updateServiceUrls('discovery', formattedDiscoveryServices);\n      }\n\n      // Check for allowed host domains.\n      if (services.allowedDomains) {\n        // Store the allowed domains as a property of the catalog.\n        catalog.setAllowedDomains(services.allowedDomains);\n      }\n\n      // Set `validateDomains` property to match configuration\n      this.validateDomains = services.validateDomains;\n    }\n  },\n\n  /**\n   * Make the initial requests to collect the root catalogs.\n   *\n   * @returns {Promise<void, Error>} - Errors if the token is unavailable.\n   */\n  initServiceCatalogs() {\n    this.logger.info('services: initializing initial service catalogs');\n\n    // Destructure the credentials plugin.\n    const {credentials} = this.webex;\n\n    // Init a promise chain. Must be done as a Promise.resolve() to allow\n    // credentials#getOrgId() to properly throw.\n    return Promise.resolve()\n      // Get the user's OrgId.\n      .then(() => credentials.getOrgId())\n      // Begin collecting the preauth/limited catalog.\n      .then((orgId) => this.collectPreauthCatalog({orgId}))\n      .then(() => {\n        // Validate if the token is authorized.\n        if (credentials.canAuthorize) {\n          // Attempt to collect the postauth catalog.\n          return this.updateServices()\n            .catch(() => this.logger.warn(\n              'services: cannot retrieve postauth catalog'\n            ));\n        }\n\n        // Return a resolved promise for consistent return value.\n        return Promise.resolve();\n      });\n  },\n\n  /**\n   * Initializer\n   *\n   * @instance\n   * @memberof Services\n   * @returns {Services}\n   */\n  initialize() {\n    const catalog = new ServiceCatalog();\n    const registry = new ServiceRegistry();\n    const state = new ServiceState();\n\n    this._catalogs.set(this.webex, catalog);\n    this.registries.set(this.webex, registry);\n    this.states.set(this.webex, state);\n\n    // Listen for configuration changes once.\n    this.listenToOnce(this.webex, 'change:config', () => {\n      this.initConfig();\n    });\n\n    // wait for webex instance to be ready before attempting\n    // to update the service catalogs\n    this.listenToOnce(this.webex, 'ready', () => {\n      const {supertoken} = this.webex.credentials;\n\n      // Validate if the supertoken exists.\n      if (supertoken && supertoken.access_token) {\n        this.initServiceCatalogs()\n          .then(() => {\n            catalog.isReady = true;\n          })\n          .catch((error) => this.logger.error(\n            `services: failed to init initial services, ${error.message}`\n          ));\n      }\n      else {\n        const {email} = this.webex.config;\n\n        this.collectPreauthCatalog(email ? {email} : undefined);\n      }\n    });\n  }\n});\n/* eslint-enable no-underscore-dangle */\n\nexport default Services;\n"]}