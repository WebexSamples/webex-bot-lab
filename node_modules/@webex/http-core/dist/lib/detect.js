"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.detect = exports.default = detect;
exports.detectSync = detectSync;

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _fileType = _interopRequireDefault(require("file-type"));

var _common = require("@webex/common");

/*!
 * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.
 */

/**
 * Determine mimeType for the specified buffer;
 * @param {Buffer} buffer
 * @returns {Promise<string>}
 */
function detect(buffer) {
  return new _promise.default(function (resolve) {
    resolve(detectSync(buffer));
  });
}

/**
 * Synchronous implementation of {@link detect}
 * @param {Buffer} buffer
 * @returns {string}
 */
function detectSync(buffer) {
  /* global Blob */
  var b = buffer;

  if (_common.inBrowser) {
    if (buffer instanceof Blob) {
      return buffer.type;
    }

    if (buffer instanceof ArrayBuffer) {
      b = new Uint8Array(buffer);
    } else if (!(buffer instanceof Uint8Array)) {
      throw new Error('`detect` requires a buffer of type Blob, ArrayBuffer, or Uint8Array');
    }
  }

  var type = (0, _fileType.default)(b);

  if (!type) {
    return 'application/octet-stream';
  }

  return type.mime;
}
//# sourceMappingURL=detect.js.map
